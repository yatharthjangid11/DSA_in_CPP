class Solution
{
public:
	void addSolution(vector<vector<int>> &board, vector<vector<int>> &ans, int n)
	{
		vector<int> temp;
		for (int i = 0; i < n; i++)
		{
			for (int j = 0; j < n; j++)
			{
				if (board[i][j] == 1)
				{
					temp.push_back(j + 1);
				}
			}
		}
		ans.push_back(temp);
	}

	bool isSafe(vector<vector<int>> &board, vector<vector<int>> &ans, int row, int col, int n)
	{
		// check for row
		int i = row;
		int j = col;
		while (j >= 0)
		{
			if (board[i][j] == 1)
			{
				return false;
			}
			j--;
		}
		// check for upper daigonal
		i = row;
		j = col;
		while (i >= 0 && j >= 0)
		{
			if (board[i][j] == 1)
			{
				return false;
			}
			i--;
			j--;
		}

		// check for lower Diagonal
		i = row;
		j = col;
		while (i < n && j >= 0)
		{
			if (board[i][j] == 1)
			{
				return false;
			}
			i++;
			j--;
		}

		// if above statements are not satisfied then
		return true;
	}

	void solve(int col, vector<vector<int>> &board, vector<vector<int>> &ans, int n)
	{
		// reached at destination
		if (col == n)
		{
			addSolution(board, ans, n);
			return;
		}

		for (int row = 0; row < n; row++)
		{
			if (isSafe(board, ans, row, col, n))
			{
				board[row][col] = 1;
				solve(col + 1, board, ans, n);
				// not true then backtrack
				board[row][col] = 0;
			}
		}

		vector<vector<int>> nQueen(int n)
		{
			vector<vector<int>> board(n, vector<int>(n, 0));
			vector<vector<int>> ans;
			solve(0, board, ans, n);
			return ans;
		}
	}
};
